name: Insert Template

on:
  workflow_dispatch:
    inputs:
      metadataUrl:
        description: 'URL of the repository to unpublish'
        required: true
      artchitectureUrl:
        description: 'URL of artchitecture diagram'
        required: false
      screenshotUrl:
        description: 'URL of screenshot'
        required: false
      ownerEmailList:
        description: 'List of owner emails to notify'
        required: true

jobs:
  insertTemplate:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install dependencies
      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      # Step 3: Download and parse metadata
      - name: Download and parse metadata
        id: fetch_metadata
        run: |
          echo "Fetching metadata from ${{ inputs.metadataUrl }}"
          curl -sL "${{ inputs.metadataUrl }}" > metadata.temp.json

          if [ ! -s metadata.temp.json ]; then
            echo "Metadata file is empty or download failed!"
            exit 1
          fi

          cat metadata.temp.json
          new_entry=$(jq -c '.' metadata.temp.json)
          title = $(jq -r '.title' metadata.temp.json)
          # Remove space in the title
          title=$(echo $title | tr -d ' ')
          
          echo "Parsed Metadata: $new_entry"
          ehco "Parsed Title: $title"
          echo "new_entry=$new_entry" >> $GITHUB_ENV
          echo "title=$title" >> $GITHUB_ENV

      # Step 4: Save architecture image if URL is provided
      - name: Save architecture diagram
        if: ${{ inputs.architectureUrl != '' }}
        run: |
          echo "Downloading architecture image from ${{ inputs.architectureUrl }}"
          curl -sL "${{ inputs.architectureUrl }}" -o images/architecture.png

      # Step 5: Save screenshot image if URL is provided
      - name: Save screenshot image
        if: ${{ inputs.screenshotUrl != '' }}
        run: |
          echo "Downloading screenshot image from ${{ inputs.screenshotUrl }}"
          curl -sL "${{ inputs.screenshotUrl }}" -o images/screenshot.png

      # Step 6: Insert metadata into template.json
      - name: Insert metadata into template.json
        run: |
          echo "Updating template.json"
          
          # Ensure the target directory exists
          mkdir -p website/static
          
          # Check if the templates.json file exists
          if [ ! -f website/static/templates.json ]; then
            echo "templates.json not found, creating a new one"
            echo "[]" > website/static/templates.json
          fi
          
          # Backup the original file
          cp website/static/templates.json website/static/templates.json.bak

          echo "New entry: ${{env.new_entry}}"

          # Insert the new entry into template.json
          jq ". += [${{env.new_entry}}]" website/static/templates.json > templates.tmp.json
          
          # Overwrite the original file
          mv templates.tmp.json website/static/templates.json

          echo "template.json updated successfully!"

      # Step 7: Commit and push changes
      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          branch_name="add-new-template-${{ env.title }}-$(date +%s)"
          git checkout -b $branch_name

          git add template.json
          if [ -f images/architecture.png ]; then git add images/architecture.png; fi
          if [ -f images/screenshot.png ]; then git add images/screenshot.png; fi

          git commit -m "Add new template: ${{ env.title }}"
          git push origin $branch_name

          echo "branch_name=$branch_name" >> $GITHUB_ENV





