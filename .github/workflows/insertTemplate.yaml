name: Insert Template

on:
  workflow_dispatch:
    inputs:
      metadataUrl:
        description: 'URL of the repository to unpublish'
        required: true
      artchitectureUrl:
        description: 'URL of artchitecture diagram'
        required: false
      screenshotUrl:
        description: 'URL of screenshot'
        required: false
      ownerEmailList:
        description: 'List of owner emails to notify'
        required: true
      templateFolder:
        description: 'Folder to save the template'
        required: false
        default: 'website/static'

jobs:
  insertTemplate:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install dependencies
      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      # Step 3: Download and parse metadata
      - name: Download and parse metadata
        id: fetch_metadata
        run: |
          echo "Fetching metadata from ${{ inputs.metadataUrl }}"
          curl -sL "${{ inputs.metadataUrl }}" > metadata.temp.json

          if [ ! -s metadata.temp.json ]; then
            echo "Metadata file is empty or download failed!"
            metadata_exists=='false'
            exit 1
          fi

          metadata_exists=='true'
          owner_email_list=$(echo '${{ inputs.ownerEmailList }}' | jq -R -c 'split(",")')

          # Update metadata with owner email list
          jq --argjson emailList "$owner_email_list" '.email = $emailList' metadata.temp.json > updated.temp.json
          mv updated.temp.json metadata.temp.json

          cat metadata.temp.json

          source=$(jq -r '.source' metadata.temp.json)
          name=$(echo $source | awk -F/ '{print $NF}')
          echo "Parsed Source: $name"
          echo "name=$name" >> $GITHUB_ENV
          echo "metadata_exists=$metadata_exists" >> $GITHUB_ENV

      # Step 4: Save architecture image if URL is provided
      - name: Save architecture diagram
        if: ${{ inputs.artchitectureUrl != '' }} && ${{ env.metadata_exists == 'true' }}
        run: |
          arch_image_path="${{ inputs.templateFolder }}/templates/images/${{ env.name }}-arch.png"
          echo "Downloading architecture image from ${{ inputs.artchitectureUrl }} to $arch_image_path"
          curl -sL "${{ inputs.artchitectureUrl }}" -o $arch_image_path
          
          # Update metadata.temp.json with the new architecture image path
          jq ".architectureDiagram = \"./templates/images/${{ env.name }}-arch.png\"" metadata.temp.json > updated.temp.json
          mv updated.temp.json metadata.temp.json
          cat metadata.temp.json

      # Step 5: Save screenshot image if URL is provided
      - name: Save screenshot image
        if: ${{ inputs.screenshotUrl != '' }} && ${{ env.metadata_exists == 'true' }}
        run: |
          screenshot_image_path="${{ inputs.templateFolder }}/templates/images/${{ env.name }}-image.png"
          echo "Downloading screenshot image from ${{ inputs.screenshotUrl }} to $screenshot_image_path"
          curl -sL "${{ inputs.screenshotUrl }}" -o $screenshot_image_path

          # Update metadata.temp.json with the new image image path
          jq ".screenshot = \"./templates/images/${{ env.name }}-image.png\"" metadata.temp.json > updated.temp.json
          mv updated.temp.json metadata.temp.json
          cat metadata.temp.json

      # Step 6: Insert metadata into template.json
      - name: Insert metadata into template.json
        if: ${{ env.metadata_exists == 'true' }}
        run: |
          echo "Updating template.json"
          
          # Ensure the target directory exists
          mkdir -p ${{ inputs.templateFolder }}
          
          # Check if the templates.json file exists
          if [ ! -f ${{ inputs.templateFolder }}/templates.json ]; then
            echo "templates.json not found, creating a new one"
            echo "[]" > ${{ inputs.templateFolder }}/templates.json
          fi
          
          # Backup the original file
          cp ${{ inputs.templateFolder }}/templates.json ${{ inputs.templateFolder }}/templates.json.bak

          new_entry=$(cat metadata.temp.json | jq -c .)
          echo "New entry: $new_entry"

          # Insert the new entry into template.json
          jq ". += [$new_entry]" ${{ inputs.templateFolder }}/templates.json > templates.tmp.json
          
          # Overwrite the original file
          mv templates.tmp.json ${{ inputs.templateFolder }}/templates.json

          echo "template.json updated successfully!"

          # Remove backup file and temporary metadata file
          rm ${{ inputs.templateFolder }}/templates.json.bak
          rm metadata.temp.json

      # Step 7: Create Pull Request
      - name: Create Pull Request
        if: ${{ env.metadata_exists == 'true' }}
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: "Publish template: ${{ env.name }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: add-new-template-${{ env.title }}-$(date +%s)
          base: main
          title: "Publish template:  ${{ env.name }}"
          body: |
            This PR unpublishes the template with repository URL:  ${{ env.name }}
          delete-branch: true
          sign-commits: true